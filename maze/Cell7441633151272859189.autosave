class Cell {
	int x, y;
  //int id = -1;
	boolean[] wall = {true, true, true, true};
	boolean visited = false;

	Cell(int i, int j) {
		x = i;
		y = j;
    //id = i*cols + j;
	}

	void showWalls(int i, int j) {
    if(wall[0]) {
      stroke(255);
      // print(i);
      // print(" ");
      // println(j);
      line(i     , j     , i+size, j  );
    }
    if(wall[1]) {
      stroke(255);
      // print(i);
      // print(" ");
      // println(j);
      line(i+size, j     , i+size, j+size);
    }
    if(wall[2]) {
      stroke(255);
      // print(i);
      // print(" ");
      // println(j);
      line(i+size, j+size, i     , j+size);
    }
    if(wall[3]) {
      stroke(255);
      // print(i);
      // print(" ");
      // println(j);
      line(i     , j+size, i     , j  );
    }
  }

	void show(int r, int g, int b, int a) {
		//noFill();
		//strokeWeight(5);
    	int i = y * size;
    	int j = x * size;
      showWalls(i, j);
		if(visited) {
      fill(r, g, b, a);
      noStroke();
      rect(i, j, size, size);
      noStroke();
      //stroke(255,0,255);
      showWalls(i, j);
      //noFill();
		}
	}

	int index(int i, int j) {
		return ((i)*cols) + (j);
	}

	Cell checkNeighbors() {
		//ArrayList<Cell> neighbor = new ArrayList<Cell>();
		Cell[] neighbor = {null, null, null, null};
		// Cell top = null, right = null, bottom = null, left = null;
		boolean added = false;
		if(y > 0) { //LEFT
			neighbor[0] = grid[x][y-1];
			if(neighbor[0] != null && !neighbor[0].visited) {
				added = true;
        
			}				
		}
		if(x < cols-1) { //BOTTOM
			neighbor[1] = grid[x+1][y];
			if(neighbor[1] != null && !neighbor[1].visited) {
				added = true;
			}
		}
		if(y < rows-1) { //RIGHT
			neighbor[2] = grid[x][y+1];
			if(neighbor[2] != null && !neighbor[2].visited) {
				added = true;
			}
		}
		if(x > 0) { //TOP
			neighbor[3] = grid[x-1][y];
			if(neighbor[3] != null && !neighbor[3].visited) {
				added = true;
			}
		}
		if(added) {
			int r;
			do {
				r = floor(random(0, 4));
			} while(neighbor[r] == null || neighbor[r].visited);
			switch(r) {
				case 0: wall[3] = false;
            grid[x][y-1].wall[1] = false;
						break;
				case 1: wall[2] = false;
            grid[x+1][y].wall[0] = false;
						break;
				case 2: wall[1] = false;
            grid[x][y+1].wall[3] = false;
						break;
				case 3: wall[0] = false;
            grid[x-1][y].wall[2] = false;
						break;						
			}
			return neighbor[r];
		} else {
      println("Reached End!!");
      noLoop();
			return null;
		}
	}
}
